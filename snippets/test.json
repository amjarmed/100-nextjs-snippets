[
  {
    "prefix": "nexapi",
    "body": "import { NextApiRequest, NextApiResponse } from 'next';\n\nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\n  res.status(200).json({ message: 'Hello, Next.js!' });\n}",
    "description": "Create a basic Next.js API route."
  },
  {
    "prefix": "nexcomp",
    "body": "import React from 'react';\n\nconst MyComponent = () => {\n  return <div>Hello, Next.js Component!</div>;\n};\n\nexport default MyComponent;",
    "description": "Create a functional Next.js component."
  },
  {
    "prefix": "nexpage",
    "body": "import React from 'react';\n\nconst PageName = () => {\n  return <h1>This is a Next.js page!</h1>;\n};\n\nexport default PageName;",
    "description": "Create a new Next.js page."
  },
  {
    "prefix": "nexlink",
    "body": "import Link from 'next/link';\n\nconst MyLink = () => {\n  return <Link href='/about'>About Us</Link>;\n};\n\nexport default MyLink;",
    "description": "Create a Next.js link."
  },
  {
    "prefix": "nexrouter",
    "body": "import { useRouter } from 'next/router';\n\nconst MyComponent = () => {\n  const router = useRouter();\n\n  return <button onClick={() => router.push('/about')}>Go to About</button>;\n};\n\nexport default MyComponent;",
    "description": "Use the Next.js router."
  },
  {
    "prefix": "neximg",
    "body": "import Image from 'next/image';\n\nconst MyImage = () => {\n  return <Image src='/image.jpg' alt='My Image' width={500} height={300} />;\n};\n\nexport default MyImage;",
    "description": "Use the Next.js Image component."
  },
  {
    "prefix": "nexdynamic",
    "body": "import dynamic from 'next/dynamic';\n\nconst DynamicComponent = dynamic(() => import('./DynamicComponent'));\n\nconst Page = () => {\n  return <DynamicComponent />;\n};\n\nexport default Page;",
    "description": "Dynamically import a component."
  },
  {
    "prefix": "nexgetstaticprops",
    "body": "export async function getStaticProps() {\n  const data = await fetch('https://api.example.com/data');\n  const json = await data.json();\n\n  return { props: { data: json } };\n}",
    "description": "Fetch data at build time."
  },
  {
    "prefix": "nexgetserversideprops",
    "body": "export async function getServerSideProps() {\n  const res = await fetch('https://api.example.com/data');\n  const data = await res.json();\n\n  return { props: { data } };\n}",
    "description": "Fetch data at request time."
  },
  {
    "prefix": "nexgetstaticpaths",
    "body": "export async function getStaticPaths() {\n  const res = await fetch('https://api.example.com/items');\n  const items = await res.json();\n\n  const paths = items.map(item => ({ params: { id: item.id.toString() } }));\n\n  return { paths, fallback: false };\n}",
    "description": "Define dynamic routes for static generation."
  },
  {
    "prefix": "nexhead",
    "body": "import Head from 'next/head';\n\nconst MyHead = () => {\n  return (\n    <Head>\n      <title>My Next.js App</title>\n      <meta name='description' content='This is my app' />\n    </Head>\n  );\n};\n\nexport default MyHead;",
    "description": "Set custom head elements in Next.js."
  },
  {
    "prefix": "nexglobalstyles",
    "body": "import '../styles/global.css';\n\nexport default function MyApp({ Component, pageProps }) {\n  return <Component {...pageProps} />;\n}",
    "description": "Global styles in Next.js."
  },
  {
    "prefix": "nexcustom404",
    "body": "const Custom404 = () => {\n  return <h1>404 - Page Not Found</h1>;\n};\n\nexport default Custom404;",
    "description": "Create a custom 404 page."
  },
  {
    "prefix": "nexcustom500",
    "body": "const Custom500 = () => {\n  return <h1>500 - Server Error</h1>;\n};\n\nexport default Custom500;",
    "description": "Create a custom 500 error page."
  },
  {
    "prefix": "nexcontext",
    "body": "import React, { createContext, useContext } from 'react';\n\nconst MyContext = createContext();\n\nexport const MyProvider = ({ children }) => {\n  const value = {}; // context value\n  return <MyContext.Provider value={value}>{children}</MyContext.Provider>;\n};\n\nexport const useMyContext = () => useContext(MyContext);",
    "description": "Set up a React context."
  },
  {
    "prefix": "nexredux",
    "body": "import { Provider } from 'react-redux';\nimport store from '../store';\n\nconst MyApp = ({ Component, pageProps }) => {\n  return (\n    <Provider store={store}>\n      <Component {...pageProps} />\n    </Provider>\n  );\n};\n\nexport default MyApp;",
    "description": "Set up Redux with Next.js."
  },
  {
    "prefix": "nexapiroute",
    "body": "// pages/api/hello.js\n\nexport default function handler(req, res) {\n  res.status(200).json({ name: 'John Doe' });\n}",
    "description": "Create an API route."
  },
  {
    "prefix": "nexrouteparams",
    "body": "const Page = ({ params }) => {\n  return <h1>Post: {params.id}</h1>;\n};\n\nexport default Page;",
    "description": "Access route parameters."
  },
  {
    "prefix": "nexstyledjs",
    "body": "import styled from 'styled-components';\n\nconst Button = styled.button`\n  background: blue;\n  color: white;\n`;\n\nconst MyComponent = () => {\n  return <Button>Click Me</Button>;\n};",
    "description": "Use styled-components in Next.js."
  },
  {
    "prefix": "nexframer",
    "body": "import { motion } from 'framer-motion';\n\nconst MyComponent = () => {\n  return <motion.div animate={{ opacity: 1 }}>Hello</motion.div>;\n};",
    "description": "Use Framer Motion for animations."
  },
  {
    "prefix": "nexrecoil",
    "body": "import { RecoilRoot } from 'recoil';\n\nconst MyApp = ({ Component, pageProps }) => {\n  return (\n    <RecoilRoot>\n      <Component {...pageProps} />\n    </RecoilRoot>\n  );\n};\n\nexport default MyApp;",
    "description": "Set up Recoil for state management."
  },
  {
    "prefix": "nexapistate",
    "body": "const MyComponent = () => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    fetch('/api/data').then(res => res.json()).then(setData);\n  }, []);\n\n  return <div>{data ? data.message : 'Loading...'}</div>;\n};",
    "description": "Fetch data from an API route."
  },
  {
    "prefix": "nexuseeffect",
    "body": "import { useEffect } from 'react';\n\nconst MyComponent = () => {\n  useEffect(() => {\n    console.log('Component mounted!');\n  }, []);\n\n  return <div>Hello, useEffect!</div>;\n};",
    "description": "Use useEffect in a component."
  },
  {
    "prefix": "nexclassnames",
    "body": "import classNames from 'classnames';\n\nconst MyComponent = ({ isActive }) => {\n  return <div className={classNames('my-class', { active: isActive })}>Hello</div>;\n};",
    "description": "Use classNames library for conditional classes."
  },
  {
    "prefix": "nexaxios",
    "body": "import axios from 'axios';\n\nconst fetchData = async () => {\n  const response = await axios.get('/api/data');\n  return response.data;\n};",
    "description": "Fetch data using Axios."
  },
  {
    "prefix": "nexnextauth",
    "body": "import { SessionProvider } from 'next-auth/react';\n\nconst MyApp = ({ Component, pageProps }) => {\n  return (\n    <SessionProvider session={pageProps.session}>\n      <Component {...pageProps} />\n    </SessionProvider>\n  );\n};\n\nexport default MyApp;",
    "description": "Set up NextAuth for authentication."
  },
  {
    "prefix": "nexjsconfig",
    "body": "/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  reactStrictMode: true,\n};\n\nmodule.exports = nextConfig;",
    "description": "Basic Next.js configuration."
  },
  {
    "prefix": "nexstaticfolder",
    "body": "// Public assets are placed in the `public` folder.\n// Access them via `/assets/img.png`.\n",
    "description": "Use public folder for static assets."
  },
  {
    "prefix": "neximport",
    "body": "import dynamic from 'next/dynamic';\nconst MyComponent = dynamic(() => import('./MyComponent'));",
    "description": "Dynamically import a component."
  },
  {
    "prefix": "nexssr",
    "body": "export async function getServerSideProps() {\n  const res = await fetch('https://api.example.com/data');\n  const data = await res.json();\n\n  return { props: { data } };\n}",
    "description": "Fetch data on the server side."
  },
  {
    "prefix": "nexfallback",
    "body": "export async function getStaticPaths() {\n  const res = await fetch('https://api.example.com/items');\n  const items = await res.json();\n\n  const paths = items.map(item => ({ params: { id: item.id.toString() } }));\n\n  return { paths, fallback: true };\n}",
    "description": "Define static paths with fallback."
  },
  {
    "prefix": "nexerror",
    "body": "import { useEffect } from 'react';\n\nconst ErrorPage = () => {\n  useEffect(() => {\n    // Log error or handle it\n  }, []);\n\n  return <h1>Something went wrong!</h1>;\n};\n\nexport default ErrorPage;",
    "description": "Create a custom error page."
  },
  {
    "prefix": "nexstylejsx",
    "body": "const MyComponent = () => {\n  return (\n    <div>\n      <style jsx>{`h1 { color: blue; }`}</style>\n      <h1>Hello, styled with JSX!</h1>\n    </div>\n  );\n};",
    "description": "Use styled JSX for scoped styles."
  },
  {
    "prefix": "nexwithrouter",
    "body": "import { withRouter } from 'next/router';\n\nconst MyComponent = ({ router }) => {\n  return <div>Current route: {router.pathname}</div>;\n};\n\nexport default withRouter(MyComponent);",
    "description": "Access router props in a component."
  },
  {
    "prefix": "nexmigrate",
    "body": "// Use `next migrate` to migrate your Next.js app to the latest version.",
    "description": "Migrate your Next.js app."
  },
  {
    "prefix": "nexsvgr",
    "body": "import { ReactComponent as Logo } from './logo.svg';\n\nconst MyComponent = () => {\n  return <Logo />;\n};",
    "description": "Import SVGs as React components."
  },
  {
    "prefix": "nexenv",
    "body": "const apiUrl = process.env.NEXT_PUBLIC_API_URL;\n\nconst MyComponent = () => {\n  return <div>{apiUrl}</div>;\n};",
    "description": "Access environment variables."
  },
  {
    "prefix": "nexfallbacktrue",
    "body": "export async function getStaticPaths() {\n  return {\n    paths: [],\n    fallback: true,\n  };\n}",
    "description": "Set fallback to true for static paths."
  },
  {
    "prefix": "nexdynamicroute",
    "body": "const DynamicRoute = ({ params }) => {\n  return <h1>Dynamic route for ID: {params.id}</h1>;\n};\n\nexport default DynamicRoute;",
    "description": "Create a dynamic route component."
  },
  {
    "prefix": "nexprerendered",
    "body": "export const getStaticProps = async () => {\n  return {\n    props: { message: 'This is pre-rendered!' },\n  };\n};",
    "description": "Pre-render a component with static props."
  },
  {
    "prefix": "nexsetcookie",
    "body": "import Cookies from 'js-cookie';\n\nconst setCookie = () => {\n  Cookies.set('myCookie', 'value');\n};",
    "description": "Set a cookie in Next.js."
  },
  {
    "prefix": "nexgetcookie",
    "body": "import Cookies from 'js-cookie';\n\nconst getCookie = () => {\n  const myCookie = Cookies.get('myCookie');\n};",
    "description": "Get a cookie in Next.js."
  },
  {
    "prefix": "nexlocalstorage",
    "body": "const setLocalStorage = () => {\n  localStorage.setItem('myItem', 'value');\n};",
    "description": "Set an item in local storage."
  },
  {
    "prefix": "nexrouterevents",
    "body": "import Router from 'next/router';\n\nRouter.events.on('routeChangeStart', (url) => {\n  console.log('Loading: ', url);\n});",
    "description": "Listen to Next.js router events."
  },
  {
    "prefix": "nexusememo",
    "body": "import { useMemo } from 'react';\n\nconst MyComponent = ({ data }) => {\n  const processedData = useMemo(() => processData(data), [data]);\n  return <div>{processedData}</div>;\n};",
    "description": "Use useMemo for performance optimization."
  },
  {
    "prefix": "nexusecallback",
    "body": "import { useCallback } from 'react';\n\nconst MyComponent = () => {\n  const handleClick = useCallback(() => {\n    console.log('Clicked!');\n  }, []);\n\n  return <button onClick={handleClick}>Click Me</button>;\n};",
    "description": "Use useCallback for memoizing callbacks."
  },
  {
    "prefix": "nexnestedroutes",
    "body": "// Define nested routes in pages/\n// /blog/index.js\n// /blog/[id].js\n",
    "description": "Create nested routes in Next.js."
  },
  {
    "prefix": "nexconsole",
    "body": "console.log('This is a log message!');",
    "description": "Basic console log statement."
  },
  {
    "prefix": "nexdeploy",
    "body": "// Use `vercel` command to deploy your Next.js app.",
    "description": "Deploy a Next.js app to Vercel."
  },
  {
    "prefix": "nexerrorhandler",
    "body": "export default function Error({ statusCode }) {\n  return <p>{statusCode ? `An error ${statusCode} occurred on server` : 'An error occurred on client'}</p>;\n}",
    "description": "Handle errors in Next.js."
  },
  {
    "prefix": "nexfallbackfalse",
    "body": "export async function getStaticPaths() {\n  return {\n    paths: [],\n    fallback: false,\n  };\n}",
    "description": "Set fallback to false for static paths."
  },
  {
    "prefix": "nexrevalidate",
    "body": "export async function getStaticProps() {\n  return {\n    props: {},\n    revalidate: 10,\n  };\n}",
    "description": "Use revalidation for static props."
  },
  {
    "prefix": "nexpageloading",
    "body": "import { useState, useEffect } from 'react';\n\nconst MyComponent = () => {\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const timer = setTimeout(() => setLoading(false), 1000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  return loading ? <p>Loading...</p> : <p>Content Loaded!</p>;\n};",
    "description": "Implement loading state in a component."
  },
  {
    "prefix": "nexapiendpoint",
    "body": "const fetchApiData = async () => {\n  const res = await fetch('/api/endpoint');\n  return res.json();\n};",
    "description": "Fetch data from an API endpoint."
  },
  {
    "prefix": "nexnextdynamic",
    "body": "const DynamicComponent = dynamic(() => import('./DynamicComponent'), {\n  loading: () => <p>Loading...</p>,\n});",
    "description": "Dynamically import with a loading component."
  },
  {
    "prefix": "nexgetinitialprops",
    "body": "MyComponent.getInitialProps = async () => {\n  const res = await fetch('https://api.example.com/data');\n  const data = await res.json();\n  return { data };\n};",
    "description": "Fetch data using getInitialProps."
  },
  {
    "prefix": "nexconditionalrender",
    "body": "const MyComponent = ({ isLoggedIn }) => {\n  return isLoggedIn ? <h1>Welcome back!</h1> : <h1>Please log in</h1>;\n};",
    "description": "Conditionally render components."
  },
  {
    "prefix": "nexstyledjs",
    "body": "import styled from 'styled-components';\n\nconst MyStyledDiv = styled.div`\n  color: blue;\n`;\n\nconst MyComponent = () => {\n  return <MyStyledDiv>Hello, styled component!</MyStyledDiv>;\n};",
    "description": "Use styled-components in a Next.js app."
  },
  {
    "prefix": "nexaxiosget",
    "body": "import axios from 'axios';\n\nconst fetchData = async () => {\n  const response = await axios.get('/api/data');\n  return response.data;\n};",
    "description": "Use Axios to perform GET requests."
  },
  {
    "prefix": "nexcookies",
    "body": "import Cookies from 'js-cookie';\n\nconst MyComponent = () => {\n  const cookieValue = Cookies.get('myCookie');\n  return <div>Cookie: {cookieValue}</div>;\n};",
    "description": "Use Cookies in Next.js."
  },
  {
    "prefix": "nexsetinterval",
    "body": "import { useEffect } from 'react';\n\nconst MyComponent = () => {\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      console.log('Tick');\n    }, 1000);\n\n    return () => clearInterval(intervalId);\n  }, []);\n\n  return <div>Check console for ticks.</div>;\n};",
    "description": "Set up an interval in a component."
  },

  {
    "prefix": "nexmemo",
    "body": "import { memo } from 'react';\n\nconst MyComponent = memo(() => {\n  return <div>Memoized Component</div>;\n});",
    "description": "Use memo to optimize component rendering."
  },
  {
    "prefix": "nexsettimeout",
    "body": "import { useEffect } from 'react';\n\nconst MyComponent = () => {\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      console.log('Timeout!');\n    }, 1000);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  return <div>Check console for timeout.</div>;\n};",
    "description": "Set up a timeout in a component."
  },
  {
    "prefix": "nexintersectionobserver",
    "body": "import { useEffect } from 'react';\n\nconst MyComponent = () => {\n  useEffect(() => {\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          console.log('Element is in view!');\n        }\n      });\n    });\n\n    const element = document.getElementById('myElement');\n    observer.observe(element);\n\n    return () => observer.disconnect();\n  }, []);\n\n  return <div id='myElement'>Observe me!</div>;\n};",
    "description": "Use Intersection Observer API."
  },
  {
    "prefix": "nexdebounce",
    "body": "import { useCallback } from 'react';\n\nconst useDebounce = (func, delay) => {\n  const timerRef = useRef();\n\n  const debouncedFunc = useCallback((...args) => {\n    clearTimeout(timerRef.current);\n    timerRef.current = setTimeout(() => {\n      func(...args);\n    }, delay);\n  }, [func, delay]);\n\n  return debouncedFunc;\n};",
    "description": "Create a custom debounce hook."
  },
  {
    "prefix": "nexthrottle",
    "body": "import { useRef } from 'react';\n\nconst useThrottle = (func, limit) => {\n  const lastFunc = useRef();\n  const lastRan = useRef();\n\n  return function(...args) {\n    if (!lastRan.current || (Date.now() - lastRan.current) >= limit) {\n      func(...args);\n      lastRan.current = Date.now();\n    }\n  };\n};",
    "description": "Create a custom throttle hook."
  },
  {
    "prefix": "nexfetchapi",
    "body": "const fetchApiData = async () => {\n  const res = await fetch('/api/data');\n  const data = await res.json();\n  return data;\n};",
    "description": "Fetch data from an API route."
  },
  {
    "prefix": "nexcustomhook",
    "body": "import { useState, useEffect } from 'react';\n\nconst useFetch = (url) => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch(url);\n      const result = await response.json();\n      setData(result);\n    };\n\n    fetchData();\n  }, [url]);\n\n  return data;\n};",
    "description": "Create a custom hook for data fetching."
  },
  {
    "prefix": "nexhocs",
    "body": "import React from 'react';\n\nconst withHOC = (WrappedComponent) => {\n  return (props) => {\n    // Add your logic here\n    return <WrappedComponent {...props} />;\n  };\n};",
    "description": "Create a higher-order component (HOC)."
  },
  {
    "prefix": "nexportal",
    "body": "import { createPortal } from 'react-dom';\n\nconst MyPortal = () => {\n  return createPortal(\n    <div>This is a portal!</div>,\n    document.getElementById('portal-root')\n  );\n};",
    "description": "Use React portals for rendering outside the main DOM hierarchy."
  },
  {
    "prefix": "nexuseform",
    "body": "import { useState } from 'react';\n\nconst MyForm = () => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  return <input value={inputValue} onChange={handleChange} />;\n};",
    "description": "Create a controlled input form."
  },
  {
    "prefix": "nexfetchhook",
    "body": "const useFetchData = (url) => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch(url);\n      const result = await response.json();\n      setData(result);\n    };\n\n    fetchData();\n  }, [url]);\n\n  return data;\n};",
    "description": "Fetch data using a custom hook."
  },
  {
    "prefix": "nexusereducer",
    "body": "import { useReducer } from 'react';\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'increment':\n      return { count: state.count + 1 };\n    default:\n      return state;\n  }\n};\n\nconst MyComponent = () => {\n  const [state, dispatch] = useReducer(reducer, { count: 0 });\n\n  return <button onClick={() => dispatch({ type: 'increment' })}>{state.count}</button>;\n};",
    "description": "Use the useReducer hook for state management."
  },
  {
    "prefix": "nexfetchSSR",
    "body": "export async function getServerSideProps() {\n  const res = await fetch('https://api.example.com/data');\n  const data = await res.json();\n\n  return { props: { data } };\n}",
    "description": "Fetch data on the server side during SSR."
  },
  {
    "prefix": "nexdynamicimport",
    "body": "import dynamic from 'next/dynamic';\n\nconst DynamicComponent = dynamic(() => import('./Component'));",
    "description": "Dynamically import a component with Next.js."
  },
  {
    "prefix": "nexnextconfig",
    "body": "/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  reactStrictMode: true,\n};\n\nmodule.exports = nextConfig;",
    "description": "Basic Next.js configuration file."
  },
  {
    "prefix": "nexstaticprops",
    "body": "export async function getStaticProps() {\n  return {\n    props: {}, // will be passed to the page component as props\n  };\n}",
    "description": "Use getStaticProps to fetch data at build time."
  },
  {
    "prefix": "nexstylecomponents",
    "body": "import styled from 'styled-components';\n\nconst MyStyledDiv = styled.div`\n  background-color: #fafafa;\n  padding: 20px;\n`;\n\nconst MyComponent = () => {\n  return <MyStyledDiv>Hello, styled components!</MyStyledDiv>;\n};",
    "description": "Use styled-components for styling."
  },
  {
    "prefix": "nexsvg",
    "body": "import { ReactComponent as Logo } from './logo.svg';\n\nconst MyComponent = () => {\n  return <Logo />;\n};",
    "description": "Import and use SVGs as components."
  },
  {
    "prefix": "nexcustomhook",
    "body": "import { useState, useEffect } from 'react';\n\nconst useFetch = (url) => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch(url);\n      const result = await response.json();\n      setData(result);\n    };\n\n    fetchData();\n  }, [url]);\n\n  return data;\n};",
    "description": "Create a custom hook for data fetching."
  },
  {
    "prefix": "nexstrictmode",
    "body": "/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  reactStrictMode: true,\n};\n\nmodule.exports = nextConfig;",
    "description": "Enable React strict mode."
  },
  {
    "prefix": "nexlayout",
    "body": "import { useEffect } from 'react';\n\nconst MyLayout = ({ children }) => {\n  useEffect(() => {\n    console.log('Layout mounted!');\n  }, []);\n\n  return <div className='layout'>{children}</div>;\n};",
    "description": "Create a layout component."
  },
  {
    "prefix": "nexdefer",
    "body": "const MyComponent = () => {\n  useEffect(() => {\n    const fetchData = async () => {\n      const res = await fetch('/api/data');\n      const data = await res.json();\n      console.log(data);\n    };\n\n    fetchData();\n  }, []);\n\n  return <div>Data fetched!</div>;\n};",
    "description": "Fetch data in a useEffect hook."
  },
  {
    "prefix": "nexhover",
    "body": "const MyComponent = () => {\n  return <div style={{ cursor: 'pointer' }}>Hover over me!</div>;\n};",
    "description": "Basic hover effect in a component."
  },
  {
    "prefix": "nexfetchdata",
    "body": "const fetchData = async () => {\n  const response = await fetch('/api/data');\n  const data = await response.json();\n  return data;\n};",
    "description": "Fetch data from an API route."
  },
  {
    "prefix": "nexcontext",
    "body": "import { createContext, useContext } from 'react';\n\nconst MyContext = createContext();\n\nconst MyProvider = ({ children }) => {\n  return <MyContext.Provider value={{ /* context values */ }}>{children}</MyContext.Provider>;\n};\n\nconst useMyContext = () => useContext(MyContext);",
    "description": "Create a context for state management."
  },
  {
    "prefix": "nexgetdata",
    "body": "const MyComponent = () => {\n  const data = fetchData();\n  return <div>{JSON.stringify(data)}</div>;\n};",
    "description": "Use a function to fetch and display data."
  },
  {
    "prefix": "nexsvgimport",
    "body": "import MySvg from './my-icon.svg';\n\nconst MyComponent = () => {\n  return <img src={MySvg} alt='My Icon' />;\n};",
    "description": "Import an SVG file as an image."
  },
  {
    "prefix": "nexstaticexport",
    "body": "export const getStaticProps = async () => {\n  return { props: { /* props */ } };\n};",
    "description": "Export static props for a page."
  },
  {
    "prefix": "nexes6module",
    "body": "import MyModule from './myModule';\n\nconst MyComponent = () => {\n  return <div>{MyModule.someFunction()}</div>;\n};",
    "description": "Import an ES6 module."
  },
  {
    "prefix": "nexjsondata",
    "body": "import data from './data.json';\n\nconst MyComponent = () => {\n  return <div>{JSON.stringify(data)}</div>;\n};",
    "description": "Import JSON data directly."
  },
  {
    "prefix": "nexfileupload",
    "body": "const MyComponent = () => {\n  const handleFileChange = (event) => {\n    const file = event.target.files[0];\n    console.log(file);\n  };\n\n  return <input type='file' onChange={handleFileChange} />;\n};",
    "description": "Handle file uploads in a component."
  },
  {
    "prefix": "neximage",
    "body": "import Image from 'next/image';\n\nconst MyComponent = () => {\n  return <Image src='/my-image.jpg' alt='My Image' width={500} height={300} />;\n};",
    "description": "Use Next.js Image component for optimized images."
  },
  {
    "prefix": "nexcustomserver",
    "body": "const express = require('express');\nconst next = require('next');\n\nconst dev = process.env.NODE_ENV !== 'production';\nconst app = next({ dev });\nconst handle = app.getRequestHandler();\n\napp.prepare().then(() => {\n  const server = express();\n\n  server.get('/custom', (req, res) => {\n    return app.render(req, res, '/custom', req.query);\n  });\n\n  server.all('*', (req, res) => {\n    return handle(req, res);\n  });\n\n  server.listen(3000, (err) => {\n    if (err) throw err;\n    console.log('> Ready on http://localhost:3000');\n  });\n});",
    "description": "Set up a custom server with Express."
  },
  {
    "prefix": "nexa11y",
    "body": "import 'next/a11y';\n\nconst MyComponent = () => {\n  return <div role='main'>Accessible content</div>;\n};",
    "description": "Enable accessibility features in Next.js."
  },
  {
    "prefix": "nexfallbackstrategy",
    "body": "export async function getStaticPaths() {\n  return {\n    paths: [],\n    fallback: 'blocking',\n  };\n}",
    "description": "Use blocking fallback for static paths."
  },
  {
    "prefix": "nexglobalstyles",
    "body": "import '../styles/global.css';\n\nconst MyApp = ({ Component, pageProps }) => {\n  return <Component {...pageProps} />;\n};\n\nexport default MyApp;",
    "description": "Import global styles in the custom App component."
  },
  {
    "prefix": "nexclassnames",
    "body": "import classNames from 'classnames';\n\nconst MyComponent = ({ isActive }) => {\n  const buttonClass = classNames('btn', { 'btn-active': isActive });\n  return <button className={buttonClass}>Click Me</button>;\n};",
    "description": "Use classnames library for conditional classes."
  },
  {
    "prefix": "nexusewindow",
    "body": "const useWindowSize = () => {\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n    height: undefined,\n  });\n\n  useEffect(() => {\n    const handleResize = () => {\n      setWindowSize({ width: window.innerWidth, height: window.innerHeight });\n    };\n\n    window.addEventListener('resize', handleResize);\n    handleResize();\n\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowSize;\n};",
    "description": "Create a custom hook to get window size."
  },
  {
    "prefix": "nexdarkmode",
    "body": "const MyComponent = () => {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n\n  const toggleDarkMode = () => {\n    setIsDarkMode(!isDarkMode);\n  };\n\n  return (\n    <div className={isDarkMode ? 'dark' : 'light'}>\n      <button onClick={toggleDarkMode}>Toggle Dark Mode</button>\n    </div>\n  );\n};",
    "description": "Toggle dark mode in a component."
  },
  {
    "prefix": "nexdebug",
    "body": "if (process.env.NODE_ENV === 'development') {\n  console.log('Debug mode');\n}",
    "description": "Debug mode check."
  },
  {
    "prefix": "nexenvironments",
    "body": "const apiUrl = process.env.NEXT_PUBLIC_API_URL;\n\nconst MyComponent = () => {\n  return <div>{apiUrl}</div>;\n};",
    "description": "Use environment variables in Next.js."
  },
  {
    "prefix": "nexlink",
    "body": "import Link from 'next/link';\n\nconst MyComponent = () => {\n  return <Link href='/about'>Go to About</Link>;\n};",
    "description": "Use Link component for navigation."
  },
  {
    "prefix": "nexnprogress",
    "body": "import Router from 'next/router';\nimport NProgress from 'nprogress';\n\nRouter.events.on('routeChangeStart', () => NProgress.start());\nRouter.events.on('routeChangeComplete', () => NProgress.done());\nRouter.events.on('routeChangeError', () => NProgress.done());",
    "description": "Add a loading bar with NProgress."
  },
  {
    "prefix": "nexswipe",
    "body": "const MyComponent = () => {\n  const handleSwipe = () => {\n    console.log('Swiped!');\n  };\n\n  return <div onTouchEnd={handleSwipe}>Swipe me!</div>;\n};",
    "description": "Handle swipe events in a component."
  },
  {
    "prefix": "nexswitch",
    "body": "const MyComponent = () => {\n  const [isOn, setIsOn] = useState(false);\n\n  return (\n    <div>\n      <label>\n        <input type='checkbox' checked={isOn} onChange={() => setIsOn(!isOn)} />\n        Toggle\n      </label>\n    </div>\n  );\n};",
    "description": "Create a toggle switch in a component."
  },
  {
    "prefix": "nexanimated",
    "body": "import { motion } from 'framer-motion';\n\nconst MyComponent = () => {\n  return <motion.div animate={{ opacity: 1 }}>Hello Animation!</motion.div>;\n};",
    "description": "Create animations using Framer Motion."
  },
  {
    "prefix": "nexresponsive",
    "body": "const MyComponent = () => {\n  return <div style={{ width: '100%', height: '100vh' }}>Responsive Component</div>;\n};",
    "description": "Create a responsive component."
  },
  {
    "prefix": "nexhandleinput",
    "body": "const MyComponent = () => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  return <input value={inputValue} onChange={handleInputChange} />;\n};",
    "description": "Handle input changes in a form."
  },
  {
    "prefix": "nexwebsockets",
    "body": "const MyComponent = () => {\n  useEffect(() => {\n    const socket = new WebSocket('ws://localhost:8080');\n\n    socket.onmessage = (event) => {\n      console.log(event.data);\n    };\n\n    return () => socket.close();\n  }, []);\n\n  return <div>WebSocket connected!</div>;\n};",
    "description": "Set up a WebSocket connection."
  },
  {
    "prefix": "nexlocalstorage",
    "body": "const MyComponent = () => {\n  const [storedValue, setStoredValue] = useState(() => {\n    if (typeof window !== 'undefined') {\n      return localStorage.getItem('myValue') || '';\n    }\n    return '';\n  });\n\n  const updateValue = (newValue) => {\n    setStoredValue(newValue);\n    localStorage.setItem('myValue', newValue);\n  };\n\n  return <input value={storedValue} onChange={(e) => updateValue(e.target.value)} />;\n};",
    "description": "Use local storage to persist state."
  },
  {
    "prefix": "nexpropsvalidation",
    "body": "import PropTypes from 'prop-types';\n\nconst MyComponent = ({ title }) => {\n  return <h1>{title}</h1>;\n};\n\nMyComponent.propTypes = {\n  title: PropTypes.string.isRequired,\n};",
    "description": "Validate props using PropTypes."
  },
  {
    "prefix": "nexfallback",
    "body": "export async function getStaticPaths() {\n  return {\n    paths: [],\n    fallback: true,\n  };\n}",
    "description": "Use fallback for dynamic routes."
  },
  {
    "prefix": "nexcustom404",
    "body": "const Custom404 = () => {\n  return <h1>404 - Page Not Found</h1>;\n};\n\nexport default Custom404;",
    "description": "Create a custom 404 page."
  },
  {
    "prefix": "nexgetinitialprops",
    "body": "const MyPage = (props) => {\n  return <div>{props.data}</div>;\n};\n\nMyPage.getInitialProps = async () => {\n  const res = await fetch('https://api.example.com/data');\n  const data = await res.json();\n  return { data };\n};",
    "description": "Use getInitialProps for data fetching."
  },
  {
    "prefix": "nexnextimage",
    "body": "import Image from 'next/image';\n\nconst MyImageComponent = () => {\n  return <Image src='/path/to/image.jpg' alt='My Image' width={500} height={500} />;\n};",
    "description": "Use the Next.js Image component."
  },
  {
    "prefix": "nexmultilanguage",
    "body": "import { useRouter } from 'next/router';\n\nconst MyComponent = () => {\n  const router = useRouter();\n  return <div>{router.locale}</div>;\n};",
    "description": "Handle multilingual routes."
  },
  {
    "prefix": "nexserverless",
    "body": "export default (req, res) => {\n  res.status(200).json({ message: 'Hello from serverless!' });\n};",
    "description": "Create a simple serverless function."
  },
  {
    "prefix": "nexcookie",
    "body": "import { parseCookies } from 'nookies';\n\nconst MyComponent = () => {\n  const cookies = parseCookies();\n  return <div>{cookies.myCookie}</div>;\n};",
    "description": "Access cookies using nookies."
  },
  {
    "prefix": "nexapi",
    "body": "export default function handler(req, res) {\n  res.status(200).json({ name: 'John Doe' });\n}",
    "description": "Create a simple API route."
  },
  {
    "prefix": "nexservercomponents",
    "body": "const MyServerComponent = () => {\n  return <div>This is a server component!</div>;\n};",
    "description": "Create a server component."
  },
  {
    "prefix": "nexsitemap",
    "body": "import { generateSitemap } from 'sitemap';\n\nexport async function getServerSideProps() {\n  const sitemap = await generateSitemap();\n  return { props: { sitemap } };\n}",
    "description": "Generate a sitemap for your Next.js app."
  },
  {
    "prefix": "nexwebmanifest",
    "body": "const MyApp = ({ Component, pageProps }) => {\n  return (\n    <>\n      <link rel='manifest' href='/manifest.json' />\n      <Component {...pageProps} />\n    </>\n  );\n};",
    "description": "Add a web manifest for PWA."
  },
  {
    "prefix": "nexstylesheets",
    "body": "import '../styles/global.css';\n\nconst MyApp = ({ Component, pageProps }) => {\n  return <Component {...pageProps} />;\n};",
    "description": "Import global CSS styles."
  },
  {
    "prefix": "nexdynamicroutes",
    "body": "export async function getStaticPaths() {\n  return {\n    paths: [{ params: { id: '1' } }],\n    fallback: false,\n  };\n}",
    "description": "Define dynamic routes with static paths."
  },
  {
    "prefix": "nexheaderfooter",
    "body": "const Header = () => <header>Header Content</header>;\nconst Footer = () => <footer>Footer Content</footer>;\n\nconst MyLayout = ({ children }) => {\n  return (\n    <div>\n      <Header />\n      {children}\n      <Footer />\n    </div>\n  );\n};",
    "description": "Create a layout with header and footer."
  },
  {
    "prefix": "nexclasscomponent",
    "body": "import React, { Component } from 'react';\n\nclass MyClassComponent extends Component {\n  render() {\n    return <div>Class Component</div>;\n  }\n}",
    "description": "Create a class component in Next.js."
  },
  {
    "prefix": "nexuseformhook",
    "body": "import { useForm } from 'react-hook-form';\n\nconst MyForm = () => {\n  const { register, handleSubmit } = useForm();\n\n  const onSubmit = (data) => {\n    console.log(data);\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input {...register('example')} />\n      <button type='submit'>Submit</button>\n    </form>\n  );\n};",
    "description": "Use react-hook-form for form handling."
  },
  {
    "prefix": "nexcode splitting",
    "body": "const MyComponent = dynamic(() => import('./MyOtherComponent'));",
    "description": "Implement code splitting with dynamic imports."
  }
]
