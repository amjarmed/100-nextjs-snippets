{
  /* 
  * ! Important Note for Contribution
*
   * top level name must start with nextjs  (ex:next | react | radux - typescript | global )
  * scope never change.
  * prefix: nex

  * TODO: 
      - snippet name :  nexUseStateSnippet
      - component name: nexArrowExportComponent
      - redux name: nexReduxSlice
      - global name: nexList

   TODO: anything new mast add name her first


  */
  /*  ########### REACT SNIPPETS #############  */
  "React Router Link Component": {
    "prefix": "nexRouterLinkComponent",
    "body": [
      "import { Link } from 'react-router-dom';",
      "",
      "const ${TM_FILENAME_BASE:} = () => {",
      "  return (",
      "    <Link to='${2:/path}'>${2:Link Text}</Link>",
      "  );",
      "};",
      "",
      "export default ${TM_FILENAME_BASE};"
    ],
    "description": "React Router Link Component"
  },
  "react useImperativeHandle": {
    "prefix": "nexUseImperativeHandle",
    "body": [
      " // call and import from component or custom hook ",
      "useImperativeHandle(ref, () => ({",
      "  ${1:exposeMethod}: () => {",
      "    ${2:implementation}",
      "  },",
      "}));"
    ],
    "description": "React useImperativeHandle Hook : call and import from component or custom hook"
  },
  "react ForwardRef": {
    "prefix": "nexForwardRef",
    "body": [
      "import React, { forwardRef } from 'react';",
      "const ${TM_FILENAME_BASE}: React.FC = forwardRef<HTMLDivElement>((props, ref) => {",
      "return <div ref={ref",
      "   }>Component Content</div>;",
      " });",
      "${TM_FILENAME_BASE}.displayName = '${TM_FILENAME_BASE}'",
      "export default ${TM_FILENAME_BASE};"
    ],
    "description": "React Forward Ref"
  },
  "react Lazy Loading Component": {
    "prefix": "nexLazyLoadingComponent",
    "body": [
      "import React, { lazy, Suspense } from 'react';",
      "",
      "const ${1:LazyComponent} = lazy(() => import('${2:./LazyComponent}'));",
      "",
      "const ${3:ComponentName} = () => {",
      "  return (",
      "    <Suspense fallback={<div>Loading...</div>}>",
      "      <${1:LazyComponent} />",
      "    </Suspense>",
      "  );",
      "};",
      "",
      "export default ${3:ComponentName};"
    ],
    "description": "Lazy load a React component"
  },
  "react lazy loading Suspense": {
    "prefix": "nexLazyLoading",
    "body": [
      "    <Suspense fallback={<div>Loading...</div>}>",
      "      <LazyComponent />",
      "    </Suspense>",
    ],
    "description": "React Suspense for lazy loading components"
  },
  "react ContextAPI Component": {
    "prefix": "nexContextAPIComponent",
    "body": [
      "import React, { useState, useContext } from 'react';",
      "",
      "const ${1:defaultValue} = {}; // Define the default value",
      "const ${2:initialState} = {}; // Define the initial state",
      "const ${3:AppContext} = React.createContext(${1:defaultValue});// the context object.",
      "",
      "//the provider component that wraps around other components to give them access to the contextâ€™s values",
      "export const ${4:Provider} = ({ children } : { children: React.ReactElement }) => {",
      "  const [${5:state}, set${6:State}] = useState(${2:initialState});",
      "",
      "  return (",
      "    <${3:AppContext}.Provider value={{ ${5:state}, set${6:State} }}>",
      "      {children}",
      "    </${3:AppContext}.Provider>",
      "  );",
      "};",
      "",
      "//is a custom hook that provides easy access to AppContext values.",
      "export const useApp${3:Context} = () => useContext(${3:AppContext});"
    ],
    "description": "React Context API : wraps children with the global state context"
  },
  //TODO: THIS MUST UPDATE
  "Import React": {
    "prefix": "nexImportReact",
    "body": [
      "import React, { ${1|useState,useEffect,useContext|} } from 'react';"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": "Imports React  with a selectable hook"
  },
  "react useMemo": {
    "prefix": "nexUseMemo",
    "body": [
      "useMemo(() => {",
      "  $1",
      "}, [$2]);"
    ]
  },
  "react useCallback": {
    "prefix": "nexUseCallback",
    "body": [
      "useCallback(() => {",
      "  $1",
      "}, [$2]);"
    ]
  },
  "react useRef": {
    "prefix": "nexUseRef",
    "body": [
      "const ${1:ref} = useRef(${2:null});"
    ],
    "description": "React useRef Hook"
  },
  "react UseReducer": {
    "prefix": "nexUseReducer",
    "body": [
      "const [${1:state}, dispatch] = useReducer(${2:reducer}, ${3:initialState});"
    ],
    "description": "React useReducer Hook"
  },
  "react UseLayoutEffect": {
    "prefix": "nexUseLayoutEffect",
    "body": [
      "useLayoutEffect(() => {",
      "  ${1:effect};",
      "}, [${2:dependencies}]);"
    ],
    "description": "React useLayoutEffect Hook"
  },
  "react UseEffect": {
    "prefix": "nexUseEffect",
    "body": [
      "useEffect(() => { $1}, []);"
    ],
    "description": " React useEffect hook."
  },
  "react UseContext": {
    "prefix": "nexUseContext",
    "body": [
      "",
      "const $1 = () => {",
      "//hint: import Your CustomContext  '../context/CustomContext'",
      "  const context = useContext($1CustomContext);",
      "  return <div>{context}</div>;",
      "};"
    ],
    "description": "useContext hook with a custom context."
  },
  "react UseState": {
    "prefix": "nexUseState",
    "body": [
      "const [$1, set$2] = useState($3);"
    ]
  },
  /*  ########### NEXTJS SNIPPETS #############  */
  "next Api Route": {
    "prefix": "nexApiRoute",
    "body": [
      "import { NextApiRequest, NextApiResponse } from 'next';",
      "",
      "export default function handler(req: NextApiRequest, res: NextApiResponse) {",
      "  res.status(200).json({ message: 'Hello, Next.js!' });",
      "}"
    ],
    "description": "Handles an incoming request and sends back a response"
  },
  "Async Component": {
    "prefix": "nexAsyncComponent",
    "body": [
      "const ${1:${TM_FILENAME_BASE}} = async () => {",
      "  return (<div> ${1:first}</div>)",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": "A reusable Async component that renders .",
  },
  "Async Component With Props": {
    "prefix": "nexAsyncComponentWithProps",
    "body": [
      "interface $1Props { name:string}",
      "",
      "const ${1:${TM_FILENAME_BASE}} = async ({name='$1'}: $1Props) => {",
      "  return (<div>${1:first}</div>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ]
  },
  "next Link": {
    "prefix": "nexlink",
    "body": [
      "<Link href='$1'>",
      "  <span>$2</span>",
      "</Link>"
    ],
    "description": "Create a nextjs Link  navigation."
  },
  "next Image": {
    "prefix": "nexImage",
    "body": [
      "",
      "<Image",
      "  src='$1'",
      "  alt='$2'",
      "  width={$3}",
      "  height={$4}",
      "/>"
    ],
    "description": "Create a Next.js Image component with required props."
  },
  "next Head Component": {
    "prefix": "nexHeadComponent",
    "body": [
      "import Head from 'next/head';",
      "",
      "const ${1:${TM_FILENAME_BASE}}= () => (",
      "  <Head>",
      "    <title>$2</title>",
      "    <meta name='description' content='$3' />",
      "  </Head>",
      ");",
      "",
      "export default ${1:${TM_FILENAME_BASE}};"
    ],
    "description": "Create a Head component for SEO."
  },
  "next Get static Props": {
    "prefix": "nexGetstaticProps",
    "body": [
      "export async function getStaticProps() {",
      "  return {",
      "    props: {}, // will be passed to the page component as props",
      "  };",
      "}"
    ],
    "description": "Create a getStaticProps function."
  },
  "next Get static Paths": {
    "prefix": "nexGetstaticPaths",
    "body": [
      "export async function getStaticPaths() {",
      "  return {",
      "    paths: [],",
      "    fallback: false",
      "  };",
      "}"
    ],
    "description": "Create a getStaticPaths function."
  },
  "next Get server side Props": {
    "prefix": "nexGetserversideProps",
    "body": [
      "export async function getServerSideProps(context) {",
      "  return {",
      "    props: {}, // will be passed to the page component as props",
      "  };",
      "}"
    ],
    "description": "Create a getServerSideProps function."
  },
  /*  ########### REDUX SNIPPETS #############  */
  "Redux ReduxSlice": {
    "prefix": "nexReduxSlice",
    "body": [
      "import { createSlice } from '@reduxjs/toolkit'",
      "",
      "const initialState = {",
      "  ${3}",
      "}",
      "",
      "const ${1:${TM_FILENAME_BASE}} = createSlice({",
      "  name: '${2:second}',",
      "  initialState,",
      "  reducers: {}",
      "});",
      "",
      "export const {} = ${1:${TM_FILENAME_BASE}}.actions",
      "",
      "export default ${1:${TM_FILENAME_BASE}}.reducer"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": "A reusable function for creating a Redux Slice, which contains a reducer and action creators for managing a specific piece of state in a Redux store."
  },
  /* ########### TypeScript SNIPPETS ############# */
  "Import statement resourses": {
    "prefix": "nexImport",
    "body": [
      "import ${2:second} from '${1:first}'"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": "import Reactjs resources  statement"
  },
  "Import Destructing resourses": {
    "prefix": "nexImportDestructing",
    "body": [
      "import { ${2:second} } from '${1:first}'"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": "import statement  {a,b} from 'c'."
  },
  /*  ########### GLOBAL SNIPPETS #############  */
  "FC React Function Component ": {
    "prefix": "nexFc",
    "body": [
      "import { FC } from 'react';",
      "interface ${TM_FILENAME_BASE} {",
      " $1",
      "}",
      "const $TM_FILENAME_BASE: FC<${TM_FILENAME_BASE}> = ($2)=> {",
      " return <div>$TM_FILENAME_BASE</div>;",
      "};",
      "export default $TM_FILENAME_BASE;",
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": "typescriptreact React Function Component"
  },
  "Page Component": {
    "prefix": "nexPage",
    "body": [
      "import React from 'react';",
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "  return (",
      "    <div>",
      "      <h1>${1:${TM_FILENAME_BASE}} Page</h1>",
      "    </div>",
      "  );",
      "};",
      "export default ${1:${TM_FILENAME_BASE}};"
    ],
    "description": "Template for a Next.js page"
  },
  "Dropdown Component": {
    "prefix": "nexDropdownComponent",
    "body": [
      " import React from 'react';",
      "export interface DropdownProps {",
      "options: { value: string; label: string}[];",
      "onSelect: (value: string) => void;}",
      "const Dropdown = ({ options, onSelect }: DropdownProps) => {",
      " return (",
      "  <select onChange={(e) => onSelect(e.target.value)}>",
      "  {options.map((option) => (",
      "   <option key={option.value} value={option.value}>",
      "    {option.label}",
      "  </option>",
      " ))}",
      "</select>",
      ");",
      "};",
      "",
      "export default Dropdown;"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": "A reusable loading spinner to simulate a loading effect ."
  },
  "Loading Spinner Component": {
    "prefix": "nexSpinnerComponent",
    "body": [
      "import React from 'react';",
      "",
      "const Spinner = ({ size, color }) => {",
      "const spinnerStyle = {",
      "  width: size,",
      " height: size,",
      " borderTopColor: color,",
      " borderLeftColor: 'transparent',",
      " animation: 'spin 1s linear infinite',",
      " borderWidth: '2px',",
      " borderStyle: 'solid',",
      "  borderRadius: '50%',",
      "};",
      "",
      " return (",
      "  <div className='inline-block animate-spin' style={spinnerStyle}></div>",
      ");",
      "};",
      "",
      "Spinner.defaultProps = {",
      " size: '6',",
      " color: 'rgba(59, 130, 246, 1)',",
      "};",
      "",
      "export default Spinner;"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": "A reusable loading spinner to simulate a loading effect ."
  },
  "Button Component": {
    "prefix": "nexButtonComponent",
    "body": [
      "import React from 'react';",
      "import PropTypes from 'prop-types';",
      "",
      "const Button = ({ type, className, children, ...props }) => {",
      " return (",
      " <button",
      "  type={type}",
      " className={className}",
      " {...props}",
      " >",
      "  {children}",
      " </button>",
      ");",
      "};",
      "",
      "Button.propTypes = {",
      " type: PropTypes.oneOf(['button', 'submit', 'reset']),",
      " className: PropTypes.string,",
      " children: PropTypes.node.isRequired,",
      "};",
      "",
      "Button.defaultProps = {",
      "type: 'button',",
      "className: '',",
      "};",
      "",
      "export default Button;"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": "Reusable button component in React code, ."
  },
  "Slider Component": {
    "prefix": "nexSliderComponent",
    "body": [
      "import Image from 'next/image';",
      "import { useState } from 'react';",
      "",
      "const ImageSlider = ({ images }: { images: string[] }) => {",
      "  const [currentIndex, setCurrentIndex] = useState(0);",
      "",
      "  const handleNextSlide = () => {",
      "    setCurrentIndex((prevIndex) =>",
      "      prevIndex === images.length - 1 ? 0 : prevIndex + 1,",
      "    );",
      "  };",
      "",
      "  const handlePrevSlide = () => {",
      "    setCurrentIndex((prevIndex) =>",
      "      prevIndex === 0 ? images.length - 1 : prevIndex - 1,",
      "    );",
      "  };",
      "",
      "  return (",
      "    <div className='slider'>",
      "      <button onClick={handlePrevSlide}>Prev</button>",
      "      <Image src={images[currentIndex]} alt='Slide' width={200} height={200} />",
      "      <button onClick={handleNextSlide}>Next</button>",
      "    </div>",
      "  );",
      "};",
      "",
      "export default ImageSlider;"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": "Next.js Image Slider Component with Next.js Image and React useState"
  },
  "Tab Component": {
    "prefix": "nexTabComponent",
    "body": [
      "import React, { useState } from 'react';",
      "",
      "const Tabs = ({ tabs }: { tabs: { title: string; content: React.ReactNode }[] }) => {",
      "const [activeTab, setActiveTab] = useState(0);",
      "",
      " return (",
      "   <div className='tabs'>",
      "  {tabs.map((tab, index) => (",
      "   <div",
      "   key={index}",
      "    className={`tab ${index === activeTab ? 'active' : ''}`}",
      "  onClick={() => setActiveTab(index)}",
      ">",
      "    {tab.title}",
      "   </div>",
      " ))}",
      " <div className='tab-content'>{tabs[activeTab].content}</div>",
      " </div>",
      ");",
      "};",
      "",
      "export default Tabs;"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": " A tab component for switching between different content."
  },
  "Modal Component": {
    "prefix": "nexModalComponent",
    "body": [
      "import React from 'react';",
      "const Modal = ({ isOpen,onClose,children,}: {isOpen: boolean;onClose: () => void; children: React.ReactNode;}) => {",
      " return isOpen ? (",
      " <div className='modal'>",
      "  <div className='modal-content'>",
      "  {children}",
      "   <button onClick={onClose}>Close</button>",
      "  </div>",
      " </div>",
      "  ) : null;",
      "};",
      "",
      "export default Modal;"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": " Creates a hook for reusing stateful logic."
  },
  "Form Component": {
    "prefix": "nexFormComponent",
    "body": [
      " import React, { useState } from 'react';",
      "const Form = () => {",
      "const [value, setValue] = useState('');",
      " const handleChange = (e) => setValue(e.target.value);",
      " const handleSubmit = (e) => {",
      "  e.preventDefault();",
      " // Handle form submission",
      "};",
      "return (",
      "<form onSubmit={handleSubmit}>",
      "  <input type='text' value={value} onChange={handleChange} />",
      "  <button type='submit'>Submit</button>",
      "  </form>",
      ");",
      "};",
      "export default Form;"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": " Creates a hook for reusing stateful logic."
  },
  "Form Rendring": {
    "prefix": "nexForm",
    "body": [
      "<form onSubmit={handleSubmit}>",
      "  <input type='text' value={value} onChange={handleChange} />",
      "  <button type='submit'>Submit</button>",
      "  </form>",
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": " Creates a hook for reusing stateful logic."
  },
  "UseFetch Custom Hook Component": {
    "prefix": "nexUseFetchComponent",
    "body": [
      "import { useState, useEffect } from 'react';",
      "//Fetches data from a given URL and stores it in component state (note: use file.ts instead of file.tsx)",
      "const useFetch = ({ url }: { url: string }) => {",
      "const [data, setData] = useState(null);",
      " const [loading, setLoading] = useState(true);",
      " useEffect(() => {",
      " const fetchData = async () => {",
      "  const response = await fetch(url);",
      "  const data = await response.json();",
      "  setData(data);",
      " setLoading(false);",
      "};",
      " fetchData();",
      "}, [url]);",
      " return { data, loading };",
      "};",
      "export default useFetch;"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": " code that handles forms and input submission."
  },
  "List Rendering": {
    "prefix": "nexlistRendering",
    "body": [
      " <ul>",
      " {items.map(item => (",
      "<li key={item.id}>{item.name}</li>",
      "  ))}",
      " </ul>",
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": "Renders items in a list, mostly from an API or database, to be displayed on the user interface."
  },
  "Comment with Date": {
    "prefix": "nexDatedComment",
    "body": [
      "// Created on ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}"
    ],
    "description": "Inserts a comment with the current date"
  },
  "Console Log": {
    "prefix": "nexClog",
    "body": [
      "console.${1:log}(${2:message});"
    ],
    "description": "Console log with editable method and message"
  }
}