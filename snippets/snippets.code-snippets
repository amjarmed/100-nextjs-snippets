{
  "nextjsPage": {
    "prefix": "nexpage",
    "body": [
      "import type { NextPage } from 'next';",
      "import HeadWrapper from '@/components/layout/HeadWrapper';",
      "import Layout from '@/components/layout/Layout';",
      "import NeedLogin from '@/components/layout/NeedLogin';",
      "",
      "const ${1:$TM_FILENAME_BASE}: NextPage = () => {",
      "  return (",
      "    <HeadWrapper>",
      "      <NeedLogin>",
      "        <Layout>",
      "          <main></main>",
      "        </Layout>",
      "      </NeedLogin>",
      "    </HeadWrapper>",
      "  );",
      "};",
      "",
      "export default ${1:$TM_FILENAME_BASE};"
    ],
    "scope": "typescriptreact",
    "description": "Create a basic Next.js page component."
  },
  "nextjsFunctionComponent": {
    "key": "reactArrowFunctionExportComponent",
    "prefix": "nexrafce",
    "body": [
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "  return (",
      "    <div>",
      "      <h1>${1:first}</h1>",
      "    </div>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },

  "nextjsApiRoute": {
    "prefix": "nexapi",
    "body": [
      "import { NextApiRequest, NextApiResponse } from 'next';",
      "",
      "export default function handler(req: NextApiRequest, res: NextApiResponse) {",
      "  res.status(200).json({ message: 'Hello, Next.js!' });",
      "}"
    ],
    "description": "Create a basic Next.js API route."
  },
  "nextjsGetstaticProps": {
    "prefix": "nexgetstaticprops",
    "body": [
      "export async function getStaticProps() {",
      "  return {",
      "    props: {}, // will be passed to the page component as props",
      "  };",
      "}"
    ],
    "description": "Create a getStaticProps function."
  },
  "nextjsGetstaticPaths": {
    "prefix": "nexgetstaticpaths",
    "body": [
      "export async function getStaticPaths() {",
      "  return {",
      "    paths: [],",
      "    fallback: false",
      "  };",
      "}"
    ],
    "description": "Create a getStaticPaths function."
  },
  "nextjsGetserversideProps": {
    "prefix": "nexgetserversideprops",
    "body": [
      "export async function getServerSideProps(context) {",
      "  return {",
      "    props: {}, // will be passed to the page component as props",
      "  };",
      "}"
    ],
    "description": "Create a getServerSideProps function."
  },
  "nextjsUseeffect": {
    "prefix": "nexuseeffect",
    "body": [
      "import { useEffect } from 'react';",
      "",
      "useEffect(() => {",
      "  $1",
      "}, []);"
    ],
    "description": "Basic useEffect hook."
  },
  "nextjsUsecontext": {
    "prefix": "nexusecontext",
    "body": [
      "import { useContext } from 'react';",
      "import { $1Context } from '../context/$1Context';",
      "",
      "const $1 = () => {",
      "  const context = useContext($1Context);",
      "  return <div>{context}</div>;",
      "};"
    ],
    "description": "useContext hook with a custom context."
  },

  "nextjsUseState": {
    "prefix": "nexstate",
    "body": ["const [$1, set$2] = useState($3);"]
  },
  "nextjsUseMemo": {
    "prefix": "nex-useMemo",
    "body": ["useMemo(() => {", "  $1", "}, [$2]);"]
  },
  "NextUseCallback": {
    "prefix": "nexuseCallback",
    "body": ["useCallback(() => {", "  $1", "}, [$2]);"]
  },
  "NextUseRef": {
    "prefix": "nexurf",
    "body": ["const ${1:ref} = useRef(${2:null});"],
    "description": "React useRef Hook"
  },
  "NextjsContextAPI": {
    "prefix": "nexcontext",
    "body": [
      "const ${1:Context} = React.createContext(${2:defaultValue});",
      "",
      "export const ${3:Provider} = ({ children }) => {",
      "  const [${4:state}, set${5:State}] = useState(${6:initialState});",
      "",
      "  return (",
      "    <${1:Context}.Provider value={{ ${4:state}, set${5:State} }}>",
      "      {children}",
      "    </${1:Context}.Provider>",
      "  );",
      "};",
      "",
      "export const use${1:Context} = () => useContext(${1:Context});"
    ],
    "description": "React Context API"
  },
  "React useReducer Hook": {
    "prefix": "nexur",
    "body": [
      "const [${1:state}, dispatch] = useReducer(${2:reducer}, ${3:initialState});"
    ],
    "description": "React useReducer Hook"
  },
  "NextUseLayoutEffectHook": {
    "prefix": "ule",
    "body": [
      "useLayoutEffect(() => {",
      "  ${1:effect};",
      "}, [${2:dependencies}]);"
    ],
    "description": "React useLayoutEffect Hook"
  },
  "nextjsHeadComponent": {
    "prefix": "nexhead",
    "body": [
      "import Head from 'next/head';",
      "",
      "const $1 = () => (",
      "  <Head>",
      "    <title>$2</title>",
      "    <meta name='description' content='$3' />",
      "  </Head>",
      ");",
      "",
      "export default $1;"
    ],
    "description": "Create a Head component for SEO."
  },
  "nextjsLinkComponent": {
    "prefix": "nexlink",
    "body": [
      "import Link from 'next/link';",
      "",
      "<Link href='$1'>",
      "  <a>$2</a>",
      "</Link>"
    ],
    "description": "Create a Link component for Next.js navigation."
  },
  "nextjsImageComponent": {
    "prefix": "neximage",
    "body": [
      "import Image from 'next/image';",
      "",
      "<Image",
      "  src='$1'",
      "  alt='$2'",
      "  width={$3}",
      "  height={$4}",
      "/>"
    ],
    "description": "Create a Next.js Image component with required props."
  },

  "nextjsAsyncFunctionComponent": {
    "prefix": "nexarafce",
    "body": [
      "const ${1:${TM_FILENAME_BASE}} = async () => {",
      "  return (",
      "    <div>",
      "      <h1>${1:first}</h1>",
      "    </div>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ]
  },
  "nextjsAsyncFunctionComponentWithProps": {
    "prefix": "nexarafcep",
    "body": [
      "interface $1Props {}",
      "",
      "const ${1:${TM_FILENAME_BASE}} = async ({}: $1Props) => {",
      "  return (",
      "    <div>",
      "      <h1>${1:first}</h1>",
      "    </div>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ]
  },
  "nextjsImport": {
    "key": "import",
    "prefix": "neximp",
    "body": ["import ${2:second} from '${1:first}'"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "nextjsImportDestructing": {
    "key": "importDestructing",
    "prefix": "neximd",
    "body": ["import { ${2:second} } from '${1:first}'"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "NextjsReduxSlice": {
    "key": "reduxSlice",
    "prefix": "nexrxslice",
    "body": [
      "import { createSlice } from '@reduxjs/toolkit'",
      "",
      "const initialState = {",
      "  ${3}",
      "}",
      "",
      "const ${1:${TM_FILENAME_BASE}} = createSlice({",
      "  name: '${2:second}',",
      "  initialState,",
      "  reducers: {}",
      "});",
      "",
      "export const {} = ${1:${TM_FILENAME_BASE}}.actions",
      "",
      "export default ${1:${TM_FILENAME_BASE}}.reducer"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "nextjsLazyLoadingComponent": {
    "prefix": "rll",
    "body": [
      "import React, { lazy, Suspense } from 'react';",
      "",
      "const ${1:LazyComponent} = lazy(() => import('${2:./LazyComponent}'));",
      "",
      "const ${3:ComponentName} = () => {",
      "  return (",
      "    <Suspense fallback={<div>Loading...</div>}>",
      "      <${1:LazyComponent} />",
      "    </Suspense>",
      "  );",
      "};",
      "",
      "export default ${3:ComponentName};"
    ],
    "description": "Lazy load a React component"
  },
  "nextjsSuspense": {
    "prefix": "nexrsus",
    "body": [
      "import React, { Suspense } from 'react';",
      "",
      "const ${1:LazyComponent} = React.lazy(() => import('${2:./LazyComponent}'));",
      "",
      "const ${3:ComponentName} = () => {",
      "  return (",
      "    <Suspense fallback={<div>Loading...</div>}>",
      "      <${1:LazyComponent} />",
      "    </Suspense>",
      "  );",
      "};",
      "",
      "export default ${3:ComponentName};"
    ],
    "description": "React Suspense for lazy loading components"
  },
  "nextjsForwardRef": {
    "prefix": "nexrfr",
    "body": [
      "import React, { forwardRef } from 'react';",
      "",
      "const ${1:ComponentName} = forwardRef((props, ref) => {",
      "  return (",
      "    <div ref={ref}>${2:Component Content}</div>",
      "  );",
      "});",
      "",
      "export default ${1:ComponentName};"
    ],
    "description": "React Forward Ref"
  },
  "nextjsUseImperativeHandleHook": {
    "prefix": "uimp",
    "body": [
      "useImperativeHandle(ref, () => ({",
      "  ${1:exposeMethod}: () => {",
      "    ${2:implementation}",
      "  },",
      "}));"
    ],
    "description": "React useImperativeHandle Hook"
  },
  "nextjsRouterLink": {
    "prefix": "nexrrouter",
    "body": [
      "import { Link } from 'react-router-dom';",
      "",
      "const ${1:ComponentName} = () => {",
      "  return (",
      "    <Link to='${2:/path}'>${3:Link Text}</Link>",
      "  );",
      "};",
      "",
      "export default ${1:ComponentName};"
    ],
    "description": "React Router Link Component"
  }
}
